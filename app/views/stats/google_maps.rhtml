<%= GMap.header(:with_vml => false) %>
<%= javascript_include_tag("ym4r-gm") %>
<%= javascript_include_tag("clusterer") %>
<%= javascript_include_tag("markerGroup") %>


<%
  group = []
  group2 = []
  group3 = []
  for device in @devices do
    user = device.user
    loc =Iplocation.get_location(device.ipaddr)
    if loc.longitude != 0 and loc.latitude != 0
      tool_tip = link_nice_device(device)
      tool_tip += "<br />"+link_nice_user(user) if user
      logger.debug("device marker")
      group << GMarker.new([loc.latitude.to_f, loc.longitude.to_f], :icon => @dev_icon ,:title => nice_device_no_pic(device), :info_window => tool_tip)      
    end
  end
  @map.overlay_global_init(GMarkerGroup.new(true, group),"devices")
  for provider in @providers do
    loc =Iplocation.get_location(provider.server_ip)
    if loc.longitude != 0 and loc.latitude != 0
      tool_tip  = "Name: "+provider.name
      tool_tip += "<br />IP: "+loc.ip if loc.ip
      tool_tip += "<br />Country: "+loc.country if loc.country
      logger.debug("provider marker")
      group2 << GMarker.new([loc.latitude.to_f, loc.longitude.to_f], :icon => @pro_icon ,:title => provider.name, :info_window => tool_tip)      
    end
  end
  @map.overlay_global_init(GMarkerGroup.new(true, group2),"providers")
  
  for server in @servers do
    loc =Iplocation.get_location(server.server_ip)
    if loc.longitude != 0 and loc.latitude != 0
      tool_tip  = "Host: "+server.hostname if server.hostname
      tool_tip += "<br />IP: "+loc.ip if loc.ip
      tool_tip += "<br />Country: "+loc.country if loc.country
      logger.debug("server")
      group3 << GMarker.new([loc.latitude.to_f, loc.longitude.to_f], :icon => @ser_icon ,:title => "Server", :info_window => tool_tip) 
    end 
  end
  @map.overlay_global_init(GMarkerGroup.new(true, group3),"servers")
%>

<%= @map.to_html %>
<%= @map.div(:width => Confline.get_value("Google_Width"), :height => Confline.get_value("Google_Height")) %>
<br />

<%= periodically_call_remote(:url => { :controller => "stats",  :action => "google_active"} ,
  :loading => "Element.show('spinner');",
  :complete=> "Element.hide('spinner');", 
  :frequency => Confline.get_value("Google_ReloadTime") ) %> 

<%= check_or_cross(session[:google_active].to_i, "active") %>
<%= link_to_remote(_("Show_active_calls_in_real_time"), :url => {:controller => 'stats', :action => "google_remove" , :type => "active" }, :loading => "Element.show('spinner');", :complete=> "Element.hide('spinner');") %><br />
<%= _("Show_in_map") %>:<br/>
<%= check_or_cross(session[:google_devices].to_i, "device") %>
<%= link_to_remote(_('Show_devices_on_map'), :url => {:controller => 'stats', :action => "google_remove" , :type => "devices" }, :loading => "Element.show('spinner');", :complete=> "Element.hide('spinner');") %><br />
<%= check_or_cross(session[:google_server].to_i, "server") %>
<%= link_to_remote(_('Show_servers_on_map'), :url => {:controller => 'stats', :action => "google_remove" , :type => "servers" }, :loading => "Element.show('spinner');", :complete=> "Element.hide('spinner');") %><br />
<%= check_or_cross(session[:google_providers].to_i, "provider") %>
<%= link_to_remote(_('Show_providers_on_map'), :url => {:controller => 'stats', :action => "google_remove" , :type => "providers" }, :loading => "Element.show('spinner');", :complete=> "Element.hide('spinner');") %><br />